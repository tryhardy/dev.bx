<?php
/*Задача
5.2.2 Шахматный Ферзь

Шахматный ферзь может ходить на любое число клеток по горизонтали, по вертикали или по диагонали.
Даны две различные клетки шахматной доски, определите, может ли ферзь попасть с первой клетки на вторую одним ходом.

***Формат ввода данных***
Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.

***Формат выходных данных***
Программа должна вывести ДА, если из первой клетки ходом Ферзя можно попасть во вторую. В противном случае - НЕТ.

***Тесты***
1, 1, 2, 8, 5 - Вы ввели более 4х чисел
1, 1, 2, 9 - Такой клетки нет на поле
1, 1, d, 8 - Данные введены некорректно
1, 1, 8, 8 - Да
2, 2, 8, 2 - Да
1, 3, 1, 8 - Да
1, 1, 2, 5 - Нет

1 любой тест на проверку неправильного хода.

***Пример***
Ввод: 1, 1, 8, 8
Вывод: Да
 */

class Chess implements  ITests
{
	public $board_array;

	function __construct()
	{
		$this->board_array = [
			'1' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'2' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'3' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'4' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'5' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'6' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'7' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
			'8' => ['1' => ' ', '2' => ' ', '3' => ' ', '4' => ' ', '5' => ' ', '6' => ' ', '7' => ' ', '8' => ' ',],
		];
	}

	public function start($console, $args = "")
	{
		if(!$args) {
			$args = $this->readFromConsole($console);
		}

		$args = explode( ", ", $args);

		if(count($args) > 4) {
			return "Вы ввели более 4х чисел";
		}

		$array = [];
		foreach ($args as $key => $arg){

			//проверяем есть ли такая клетка вообще
			if($arg > count($this->board_array)) {
				return "Такой клетки нет на поле";
			}

			if(!is_numeric($arg)) {
				return "Данные введены некорректно";
			}

			//Горизонталь и вертикаль
			if($this->even($key)) {
				$array["j"][] = $arg;
			} else {
				$array["i"][] = $arg;
			}
		}

		if(
			$array["j"][0] == $array["j"][1]
			|| $array["i"][0] == $array["i"][1]
			|| ($array["i"][0] - $array["j"][0]) == ($array["i"][1] - $array["j"][1])
		)
			return "Да";

		return "Нет";
	}

	private function even($arg)
	{
		if($arg % 2 === 0)
			return true;
	}

	private function readFromConsole($console)
	{
		echo $console;
		return trim(fgets(STDIN));
	}

	public function runTest($arg1, $arg2, $expectedResult, $message = "")
	{
		$result = $this->start($arg1, $arg2);
		echo $message . ($result === $expectedResult ? "test passed" : "test failed") . PHP_EOL . PHP_EOL;
	}

}

interface ITests
{
	public function runTest($arg2, $arg1, $expectedResult, $message = "");
}